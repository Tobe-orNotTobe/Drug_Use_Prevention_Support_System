@model DUPSWebApp.Models.LoginViewModel
@{
    ViewData["Title"] = "Đăng nhập";
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h2 class="text-center mb-0">@ViewData["Title"]</h2>
            </div>
            <div class="card-body">
                <!-- Alert container -->
                <div id="alert-container"></div>

                <form id="loginForm">
                    <div class="form-group mb-3">
                        <label for="Email" class="form-label">Email</label>
                        <input type="email" id="Email" name="Email" class="form-control" placeholder="Nhập email của bạn" required />
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="form-group mb-3">
                        <label for="Password" class="form-label">Mật khẩu</label>
                        <input type="password" id="Password" name="Password" class="form-control" placeholder="Nhập mật khẩu" required />
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="form-check mb-3">
                        <input type="checkbox" id="RememberMe" name="RememberMe" class="form-check-input" />
                        <label for="RememberMe" class="form-check-label">Ghi nhớ đăng nhập</label>
                    </div>

                    <div class="d-grid">
                        <button type="submit" id="loginBtn" class="btn btn-primary btn-lg">
                            <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                            Đăng nhập
                        </button>
                    </div>
                </form>
            </div>
            <div class="card-footer text-center">
                <p class="mb-0">
                    Chưa có tài khoản?
                    <a href="/Auth/Register" class="text-decoration-none">Đăng ký ngay</a>
                </p>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('loginForm');
        const loginBtn = document.getElementById('loginBtn');
        const spinner = loginBtn.querySelector('.spinner-border');
        const alertContainer = document.getElementById('alert-container');

        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Clear previous alerts and validation
            clearAlerts();
            clearValidation();

            // Show loading
            setLoading(true);

            // Get form data
            const formData = new FormData(form);
            const data = {
                email: formData.get('Email'),
                password: formData.get('Password'),
                rememberMe: formData.get('RememberMe') === 'on'
            };

            console.log('Sending data:', data);

            try {
                const response = await fetch('/Auth/Login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': await getAntiForgeryToken()
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                console.log('Response:', result);

                if (result.success) {
                    showAlert('success', result.message || 'Đăng nhập thành công!');
                    // Redirect after 1 second
                    setTimeout(() => {
                        window.location.href = result.redirectUrl || '/';
                    }, 1000);
                } else {
                    showAlert('danger', result.message || 'Đăng nhập thất bại');
                    if (result.errors) {
                        showValidationErrors(result.errors);
                    }
                }
            } catch (error) {
                console.error('Login error:', error);
                showAlert('danger', 'Có lỗi xảy ra. Vui lòng thử lại.');
            } finally {
                setLoading(false);
            }
        });

        function setLoading(loading) {
            if (loading) {
                loginBtn.disabled = true;
                spinner.classList.remove('d-none');
                loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Đang xử lý...';
            } else {
                loginBtn.disabled = false;
                spinner.classList.add('d-none');
                loginBtn.innerHTML = 'Đăng nhập';
            }
        }

        function showAlert(type, message) {
            const alert = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            alertContainer.innerHTML = alert;
        }

        function clearAlerts() {
            alertContainer.innerHTML = '';
        }

        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        function showValidationErrors(errors) {
            for (const [field, messages] of Object.entries(errors)) {
                const input = document.getElementById(field);
                if (input) {
                    input.classList.add('is-invalid');
                    const feedback = input.parentNode.querySelector('.invalid-feedback');
                    if (feedback) {
                        feedback.textContent = messages.join(', ');
                    }
                }
            }
        }

        async function getAntiForgeryToken() {
            try {
                const response = await fetch('/Auth/GetAntiForgeryToken');
                const data = await response.json();
                return data.token;
            } catch {
                return '';
            }
        }
    });
</script>